/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pack_presentacion.nomina;

import Pack_negocio.EmpleadoJpaController;
import Pack_negocio.exceptions.NonexistentEntityException;
import Pack_negocio.exceptions.PreexistingEntityException;
import Pack_persistencia.Empleado;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class EmpleadoF extends javax.swing.JFrame {

    private EmpleadoJpaController EmpleadoJpaController;
    private EntityManagerFactory emf;

    /**
     * Creates new form Empleado
     */
    public EmpleadoF() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        emf = Persistence.createEntityManagerFactory("ProyectoAppDistiPU");
        EmpleadoJpaController = new EmpleadoJpaController(emf);
        TablaEmpleado();
    }

    private void TablaEmpleado() {
        List<Empleado> empleados = EmpleadoJpaController.findEmpleadoEntities();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Empleado empleado : empleados) {
            model.addRow(new Object[]{empleado.getCedula(), empleado.getNombre(), empleado.getIngreso(), empleado.getSueldo()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Agregar_BTN = new javax.swing.JButton();
        Buscar_BTN = new javax.swing.JButton();
        Eliminar_BTN = new javax.swing.JButton();
        Modificar_BTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel2.setText("Detalle Empleado");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre", "Fecha Ingreso", "Sueldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        Agregar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Agregar_BTN.setText("Agregar");
        Agregar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Agregar_BTNActionPerformed(evt);
            }
        });

        Buscar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Buscar_BTN.setText("Buscar");
        Buscar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buscar_BTNActionPerformed(evt);
            }
        });

        Eliminar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Eliminar_BTN.setText("Eliminar");
        Eliminar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Eliminar_BTNActionPerformed(evt);
            }
        });

        Modificar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Modificar_BTN.setText("Modificar");
        Modificar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Modificar_BTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(Agregar_BTN)
                .addGap(79, 79, 79)
                .addComponent(Buscar_BTN)
                .addGap(116, 116, 116)
                .addComponent(Eliminar_BTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(Modificar_BTN)
                .addGap(105, 105, 105))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agregar_BTN)
                    .addComponent(Buscar_BTN)
                    .addComponent(Eliminar_BTN)
                    .addComponent(Modificar_BTN))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Agregar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Agregar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            // Pedir datos al usuario
            String cedulaStr = JOptionPane.showInputDialog("Ingrese la cédula:");
            if (cedulaStr == null || cedulaStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "La cédula no puede estar vacía.");
                return;
            }
            long cedula = Long.parseLong(cedulaStr);

            String nombre = JOptionPane.showInputDialog("Ingrese el nombre:");
            if (nombre == null || nombre.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre no puede estar vacío.");
                return;
            }

            String sueldoStr = JOptionPane.showInputDialog("Ingrese el sueldo:");
            if (sueldoStr == null || sueldoStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El sueldo no puede estar vacío.");
                return;
            }
            BigInteger sueldo = new BigInteger(sueldoStr);

            // Crear nuevo objeto Empleado
            Empleado nuevoEmpleado = new Empleado();
            nuevoEmpleado.setCedula(cedula);
            nuevoEmpleado.setNombre(nombre);
            nuevoEmpleado.setIngreso(new Date()); // Fecha actual
            nuevoEmpleado.setSueldo(sueldo);

            // Insertar en BD
            EmpleadoJpaController.create(nuevoEmpleado);

            JOptionPane.showMessageDialog(this, "Empleado agregado correctamente.");

            // Recargar tabla 
            TablaEmpleado();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Formato numérico inválido en cédula o sueldo.");
        } catch (PreexistingEntityException ex) {
            JOptionPane.showMessageDialog(this, "El empleado ya existe.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al agregar empleado.");
        }
    }//GEN-LAST:event_Agregar_BTNActionPerformed

    private void Buscar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buscar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            // Solicita al usuario que ingrese el ID del empleado
            String idStr = JOptionPane.showInputDialog("Ingrese el ID del empleado:");
            if (idStr == null || idStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El ID no puede estar vacío.");
                return;
            }

            // Convertir a BigDecimal porque así lo maneja tu entidad
            BigDecimal id = new BigDecimal(idStr);

            // Buscar el empleado en la base de datos
            Empleado empleado = EmpleadoJpaController.findEmpleado(id);

            if (empleado != null) {
                // Construye el mensaje con los datos del empleado
                String mensaje = "Empleado encontrado:\n"
                        + "ID: " + empleado.getIdEmpleado() + "\n"
                        + "Cédula: " + empleado.getCedula() + "\n"
                        + "Nombre: " + empleado.getNombre() + "\n"
                        + "Ingreso: " + empleado.getIngreso() + "\n"
                        + "Sueldo: " + empleado.getSueldo();
                JOptionPane.showMessageDialog(this, mensaje);
            } else {
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un número válido para el ID.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar empleado.");
        }
    }//GEN-LAST:event_Buscar_BTNActionPerformed

    private void Eliminar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Eliminar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            // Solicita el ID del empleado a eliminar
            String idStr = JOptionPane.showInputDialog("Ingrese el ID del empleado a eliminar:");
            if (idStr == null || idStr.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "El ID no puede estar vacío.");
                return;
            }

            BigDecimal id = new BigDecimal(idStr);

            // Busca el empleado
            Empleado empleado = EmpleadoJpaController.findEmpleado(id);

            if (empleado != null) {
                // Confirmación de eliminación
                int confirmacion = JOptionPane.showConfirmDialog(
                        this,
                        "¿Estás seguro que deseas eliminar al empleado con nombre: " + empleado.getNombre() + "?",
                        "Confirmar eliminación",
                        JOptionPane.YES_NO_OPTION
                );
                if (confirmacion == JOptionPane.YES_OPTION) {
                    // Elimina el empleado
                    EmpleadoJpaController.destroy(id);

                    // Actualiza la tabla 
                    TablaEmpleado();
                    JOptionPane.showMessageDialog(this, "Empleado eliminado correctamente.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un ID válido (número).");
        } catch (NonexistentEntityException e) {
            JOptionPane.showMessageDialog(this, "El empleado no existe en la base de datos.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar empleado.");
        }
    }//GEN-LAST:event_Eliminar_BTNActionPerformed

    private void Modificar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Modificar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            // Solicita el ID del empleado a modificar
            BigDecimal id = new BigDecimal(JOptionPane.showInputDialog("Ingrese el ID del empleado:"));

            // Busca el empleado
            Empleado empleado = EmpleadoJpaController.findEmpleado(id);

            if (empleado != null) {
                // Solicita nueva cédula
                String cedulaStr = JOptionPane.showInputDialog("Ingrese la cédula:", String.valueOf(empleado.getCedula()));
                if (cedulaStr == null || cedulaStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "La cédula no puede estar vacía.");
                    return;
                }
                long nuevaCedula = Long.parseLong(cedulaStr);

                // Solicita nuevo nombre
                String nuevoNombre = JOptionPane.showInputDialog("Ingrese el nombre:", empleado.getNombre());
                if (nuevoNombre == null || nuevoNombre.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "El nombre no puede estar vacío.");
                    return;
                }

                // Sueldo
                String sueldoStr = JOptionPane.showInputDialog("Ingrese el sueldo:", empleado.getSueldo().toString());
                if (sueldoStr == null || sueldoStr.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "El sueldo no puede estar vacío.");
                    return;
                }
                BigInteger nuevoSueldo = new BigInteger(sueldoStr);

                // Asigna los nuevos valores
                empleado.setCedula(nuevaCedula);
                empleado.setNombre(nuevoNombre);
                empleado.setIngreso(new Date()); //Fecha actual automáticamente
                empleado.setSueldo(nuevoSueldo);

                // Guarda los cambios
                EmpleadoJpaController.edit(empleado);

                TablaEmpleado(); // Refresca 
                JOptionPane.showMessageDialog(this, "Empleado modificado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor numérico válido.");
        } catch (NonexistentEntityException ex) {
            JOptionPane.showMessageDialog(this, "El empleado no existe.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al modificar empleado.");
        }
    }//GEN-LAST:event_Modificar_BTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpleadoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpleadoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpleadoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpleadoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmpleadoF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar_BTN;
    private javax.swing.JButton Buscar_BTN;
    private javax.swing.JButton Eliminar_BTN;
    private javax.swing.JButton Modificar_BTN;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
