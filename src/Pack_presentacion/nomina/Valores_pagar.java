/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pack_presentacion.nomina;

import Pack_negocio.DnominaJpaController;
import Pack_negocio.EmpleadoJpaController;
import Pack_negocio.ValoresPagarJpaController;
import Pack_persistencia.Dnomina;
import Pack_persistencia.Empleado;
import Pack_persistencia.ValoresPagar;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HP
 */
public class Valores_pagar extends javax.swing.JFrame {

    private DnominaJpaController DnominaJpaController;
    private EmpleadoJpaController EmpleadoJpaController;
    private ValoresPagarJpaController ValoresPagarJpaController;
    private EntityManagerFactory emf;

    /**
     * Creates new form Valores_Pagar
     */
    public Valores_pagar() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        emf = Persistence.createEntityManagerFactory("ProyectoAppDistiPU");
        DnominaJpaController = new DnominaJpaController(emf);
        EmpleadoJpaController = new EmpleadoJpaController(emf);
        ValoresPagarJpaController = new ValoresPagarJpaController(emf);
        loadValores();
    }

    private void loadValores() {
        List<Empleado> empleados = EmpleadoJpaController.findEmpleadoEntities();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de cargar los datos

        for (Empleado empleado : empleados) {
            List<Pack_persistencia.ValoresPagar> valores = empleado.getValoresPagarList();
            for (Pack_persistencia.ValoresPagar valor : valores) {
                Dnomina detalle = valor.getIdDetalle();
                if (detalle != null && detalle.getTotalPagar() != null) {
                    model.addRow(new Object[]{
                        empleado.getNombre(),
                        detalle.getTotalPagar(),
                        valor.getFechaGeneracion()
                    });
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Agregar_BTN = new javax.swing.JButton();
        Buscar_BTN = new javax.swing.JButton();
        Modificar_BTN = new javax.swing.JButton();
        Eliminar_BTN = new javax.swing.JButton();
        Imprimir_BTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("Valores a Pagar");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Empleado", "Valor a Recibir", "Fecha"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jScrollPane1.setViewportView(jScrollPane2);

        Agregar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Agregar_BTN.setText("Agregar");
        Agregar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Agregar_BTNActionPerformed(evt);
            }
        });

        Buscar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Buscar_BTN.setText("Buscar");
        Buscar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buscar_BTNActionPerformed(evt);
            }
        });

        Modificar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Modificar_BTN.setText("Modificar");
        Modificar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Modificar_BTNActionPerformed(evt);
            }
        });

        Eliminar_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Eliminar_BTN.setText("Eliminar");
        Eliminar_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Eliminar_BTNActionPerformed(evt);
            }
        });

        Imprimir_BTN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Imprimir_BTN.setText("Imprimir");
        Imprimir_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Imprimir_BTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Agregar_BTN)
                        .addGap(85, 85, 85)
                        .addComponent(Buscar_BTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Modificar_BTN)
                        .addGap(78, 78, 78)
                        .addComponent(Eliminar_BTN))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Imprimir_BTN)
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Agregar_BTN)
                    .addComponent(Buscar_BTN)
                    .addComponent(Modificar_BTN)
                    .addComponent(Eliminar_BTN))
                .addGap(18, 18, 18)
                .addComponent(Imprimir_BTN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Agregar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Agregar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            // Seleccionar un empleado
            List<Empleado> empleados = EmpleadoJpaController.findEmpleadoEntities();
            String[] nombres = empleados.stream().map(Empleado::getNombre).toArray(String[]::new);
            String nombreSeleccionado = (String) javax.swing.JOptionPane.showInputDialog(this,
                    "Seleccione un empleado", "Agregar Valor",
                    javax.swing.JOptionPane.PLAIN_MESSAGE, null, nombres, nombres[0]);

            if (nombreSeleccionado == null) {
                return; // Cancelado
            }
            Empleado empleadoSeleccionado = empleados.stream()
                    .filter(e -> e.getNombre().equals(nombreSeleccionado))
                    .findFirst().orElse(null);

            if (empleadoSeleccionado == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
                return;
            }

            // Seleccionar un Dnomina
            List<Dnomina> dnominas = DnominaJpaController.findDnominaEntities();
            String[] detalles = dnominas.stream()
                    .map(d -> "ID " + d.getIdDetalle() + " - Total: " + d.getTotalPagar())
                    .toArray(String[]::new);

            String detalleSeleccionado = (String) javax.swing.JOptionPane.showInputDialog(this,
                    "Seleccione un detalle de nómina", "Agregar Valor",
                    javax.swing.JOptionPane.PLAIN_MESSAGE, null, detalles, detalles[0]);

            if (detalleSeleccionado == null) {
                return; // Cancelado
            }
            Long idDetalleSeleccionado = Long.parseLong(detalleSeleccionado.split(" ")[1]);
            Dnomina dnominaSeleccionada = dnominas.stream()
                    .filter(d -> d.getIdDetalle().equals(idDetalleSeleccionado))
                    .findFirst().orElse(null);

            if (dnominaSeleccionada == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Detalle de nómina no encontrado.");
                return;
            }

            // Crear nuevo objeto ValoresPagar
            ValoresPagar nuevoValor = new ValoresPagar();
            nuevoValor.setIdValor(null); 
            nuevoValor.setIdEmpleado(empleadoSeleccionado);
            nuevoValor.setIdDetalle(dnominaSeleccionada);
            nuevoValor.setFechaGeneracion(new java.util.Date());
            nuevoValor.setTotal(dnominaSeleccionada.getTotalPagar());

            ValoresPagarJpaController.create(nuevoValor);

            javax.swing.JOptionPane.showMessageDialog(this, "Valor agregado exitosamente.");
            loadValores(); // refrescar la tabla

        } catch (Exception ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error al agregar valor: " + ex.getMessage());
        }
    }//GEN-LAST:event_Agregar_BTNActionPerformed

    private void Buscar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buscar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            List<Empleado> empleados = EmpleadoJpaController.findEmpleadoEntities();
            if (empleados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay empleados registrados.");
                return;
            }

            String[] nombres = empleados.stream().map(Empleado::getNombre).toArray(String[]::new);
            String nombreSeleccionado = (String) JOptionPane.showInputDialog(this,
                    "Seleccione un empleado para buscar sus valores",
                    "Buscar por Empleado",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    nombres,
                    nombres[0]);

            if (nombreSeleccionado == null) {
                return; // cancelado
            }
            Empleado empleadoSeleccionado = empleados.stream()
                    .filter(e -> e.getNombre().equals(nombreSeleccionado))
                    .findFirst().orElse(null);

            if (empleadoSeleccionado == null) {
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
                return;
            }

            List<ValoresPagar> valores = empleadoSeleccionado.getValoresPagarList();
            if (valores.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Este empleado no tiene valores registrados.");
                return;
            }

            // Mostrar los valores en la tabla
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Limpiar tabla
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

            for (ValoresPagar valor : valores) {
                Dnomina detalle = valor.getIdDetalle();
                if (detalle != null && detalle.getTotalPagar() != null) {
                    model.addRow(new Object[]{
                        empleadoSeleccionado.getNombre(),
                        detalle.getTotalPagar(),
                        sdf.format(valor.getFechaGeneracion())
                    });
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar valores: " + ex.getMessage());
        }
    }//GEN-LAST:event_Buscar_BTNActionPerformed

    private void Modificar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Modificar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            //Seleccionar el empleado
            List<Empleado> empleados = EmpleadoJpaController.findEmpleadoEntities();
            String[] nombres = empleados.stream().map(Empleado::getNombre).toArray(String[]::new);

            String nombreSeleccionado = (String) javax.swing.JOptionPane.showInputDialog(this,
                    "Seleccione el empleado que desea modificar", "Modificar Valor",
                    javax.swing.JOptionPane.PLAIN_MESSAGE, null, nombres, nombres[0]);

            if (nombreSeleccionado == null) {
                return; // cancelado
            }

            Empleado empleadoSeleccionado = empleados.stream()
                    .filter(e -> e.getNombre().equals(nombreSeleccionado))
                    .findFirst().orElse(null);

            if (empleadoSeleccionado == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
                return;
            }

            //Seleccionar el valor a modificar
            List<ValoresPagar> listaValores = empleadoSeleccionado.getValoresPagarList();
            if (listaValores.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Este empleado no tiene valores registrados.");
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

            // Mapa para vincular texto mostrado con el objeto ValoresPagar
            Map<String, ValoresPagar> opcionesMap = new LinkedHashMap<>();
            for (ValoresPagar v : listaValores) {
                String texto = "Fecha: " + sdf.format(v.getFechaGeneracion()) + " | Total: " + v.getTotal();
                opcionesMap.put(texto, v);
            }

            String[] opciones = opcionesMap.keySet().toArray(new String[0]);

            String seleccion = (String) javax.swing.JOptionPane.showInputDialog(this,
                    "Seleccione el valor que desea modificar", "Modificar Valor",
                    javax.swing.JOptionPane.PLAIN_MESSAGE, null, opciones, opciones[0]);

            if (seleccion == null) {
                return;
            }

            ValoresPagar valorOriginal = opcionesMap.get(seleccion);

            //Seleccionar nuevo detalle de nómina
            List<Dnomina> dnominas = DnominaJpaController.findDnominaEntities();
            String[] opcionesD = dnominas.stream()
                    .map(d -> "ID " + d.getIdDetalle() + " - Total: " + d.getTotalPagar())
                    .toArray(String[]::new);

            String seleccionD = (String) javax.swing.JOptionPane.showInputDialog(this,
                    "Seleccione el nuevo detalle de nómina", "Modificar Valor",
                    javax.swing.JOptionPane.PLAIN_MESSAGE, null, opcionesD, opcionesD[0]);

            if (seleccionD == null) {
                return;
            }

            Long idDetalleNuevo = Long.parseLong(seleccionD.split(" ")[1]);
            Dnomina nuevaDnomina = dnominas.stream()
                    .filter(d -> d.getIdDetalle().equals(idDetalleNuevo))
                    .findFirst().orElse(null);

            if (nuevaDnomina == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Detalle de nómina no encontrado.");
                return;
            }

            // Actualizar el objeto
            valorOriginal.setIdDetalle(nuevaDnomina);
            valorOriginal.setTotal(nuevaDnomina.getTotalPagar());
            ValoresPagarJpaController.edit(valorOriginal);

            javax.swing.JOptionPane.showMessageDialog(this, "Valor modificado exitosamente.");
            loadValores();

        } catch (Exception ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error al modificar valor: " + ex.getMessage());
        }
    }//GEN-LAST:event_Modificar_BTNActionPerformed

    private void Eliminar_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Eliminar_BTNActionPerformed
        // TODO add your handling code here:
        try {
            List<Empleado> empleados = EmpleadoJpaController.findEmpleadoEntities();
            if (empleados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay empleados registrados.");
                return;
            }

            //Seleccionar el empleado
            String[] nombres = empleados.stream().map(Empleado::getNombre).toArray(String[]::new);
            String nombreSeleccionado = (String) JOptionPane.showInputDialog(this,
                    "Seleccione el empleado", "Eliminar Valor",
                    JOptionPane.PLAIN_MESSAGE, null, nombres, nombres[0]);

            if (nombreSeleccionado == null) {
                return;
            }

            Empleado empleadoSeleccionado = empleados.stream()
                    .filter(e -> e.getNombre().equals(nombreSeleccionado))
                    .findFirst().orElse(null);

            if (empleadoSeleccionado == null) {
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.");
                return;
            }

            //Obtener valores de ese empleado
            List<ValoresPagar> valores = empleadoSeleccionado.getValoresPagarList();
            if (valores.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Este empleado no tiene valores registrados.");
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            Map<String, ValoresPagar> opcionesMap = new LinkedHashMap<>();
            for (ValoresPagar v : valores) {
                String texto = "Fecha: " + sdf.format(v.getFechaGeneracion()) + " | Total: " + v.getTotal();
                opcionesMap.put(texto, v);
            }

            String[] opciones = opcionesMap.keySet().toArray(new String[0]);
            String seleccion = (String) JOptionPane.showInputDialog(this,
                    "Seleccione el valor que desea eliminar", "Eliminar Valor",
                    JOptionPane.PLAIN_MESSAGE, null, opciones, opciones[0]);

            if (seleccion == null) {
                return;
            }

            ValoresPagar valorAEliminar = opcionesMap.get(seleccion);

            //Confirmar eliminación
            int confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro que desea eliminar este valor?\n" + seleccion,
                    "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion != JOptionPane.YES_OPTION) {
                return;
            }

            //Eliminar
            Long id = valorAEliminar.getIdValor();

            if (id == null) {
                JOptionPane.showMessageDialog(this, "Error: el valor seleccionado no tiene un ID válido.");
                return;
            }

            ValoresPagarJpaController.destroy(id);

            JOptionPane.showMessageDialog(this, "Valor eliminado exitosamente.");
            loadValores();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar valor: " + ex.getMessage());
        }
    }//GEN-LAST:event_Eliminar_BTNActionPerformed

    private void Imprimir_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Imprimir_BTNActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Reporte de Valores a Pagar");
        MessageFormat footer = new MessageFormat("Página {0}");

        try {
            boolean completo = jTable1.print(javax.swing.JTable.PrintMode.FIT_WIDTH, header, footer);
            if (completo) {
                javax.swing.JOptionPane.showMessageDialog(this, "Impresión completada correctamente.");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Impresión cancelada.");
            }
        } catch (java.awt.print.PrinterException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al imprimir: " + e.getMessage());
        }
    }//GEN-LAST:event_Imprimir_BTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Valores_pagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Valores_pagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Valores_pagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Valores_pagar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Valores_pagar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar_BTN;
    private javax.swing.JButton Buscar_BTN;
    private javax.swing.JButton Eliminar_BTN;
    private javax.swing.JButton Imprimir_BTN;
    private javax.swing.JButton Modificar_BTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
